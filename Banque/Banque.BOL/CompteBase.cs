//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banque.BOL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;

    public partial class CompteBase : INotifyPropertyChanged
    {
        #region Champs
        private string _codeClient;
        private string _codeBanque;
        private string _codeGuichet;
        private string _numeroCompte;
        private string _cleRIB;
        private string _libelleCompte;
        #endregion

        public Nullable<int> OrdreListe { get; set; }
        public virtual Client Client { get; set; }
        public virtual Guichet Guichet { get; set; }

        #region Propriétés
        public string CodeClient
        {
            get { return _codeClient; }
            set
            {
                _codeClient = value;
            }
        }
        public string CodeBanque
        {
            get { return _codeBanque; }
            set
            {
                if (!IsCodeValide(value, 5))
                    throw new ApplicationException(
                        string.Format(CultureInfo.CurrentCulture, Messages.Compte001, value, 5));


                if (_codeBanque != value)
                {
                    this._codeBanque = value.PadLeft(5, '0');
                    NotifyPropertyChanged();
                }
            }
        }
        public string CodeGuichet
        {
            get { return _codeGuichet; }
            set
            {
                if (!IsCodeValide(value, 5))
                {
                    throw new ApplicationException(
                        string.Format(CultureInfo.CurrentCulture, Messages.Compte001, value, 5));
                }
                if (_codeGuichet != value)
                {
                    this._codeGuichet = value.PadLeft(5, '0');
                    NotifyPropertyChanged();
                }
            }
        }

        public string NumeroCompte
        {
            get { return _numeroCompte; }
            set
            {
                if (!IsNumeroCompteValide(value))
                {
                    throw new ApplicationException(
                        string.Format(CultureInfo.CurrentCulture, Messages.Compte002, value, 11));
                }

                if (_numeroCompte != value)
                {
                    this._numeroCompte = value.PadLeft(11, '0');
                    NotifyPropertyChanged();
                }
            }
        }
        public string CleRIB
        {
            get { return _cleRIB; }
            set
            {
                if (!IsControleCleRIBValide(_codeBanque, _codeGuichet, Transcoder(_numeroCompte), value))
                {

                    throw new ApplicationException(
                        string.Format(CultureInfo.CurrentCulture, Messages.Compte003, value));
                }
                if (_cleRIB != value)
                {
                    this._cleRIB = value;
                    NotifyPropertyChanged();
                }
            }
        }
        public string LibelleCompte
        {
            get { return _libelleCompte; }
            set
            {
                if (!IsLibelleCompteValide(value))
                {
                    throw new ApplicationException(
                       string.Format(CultureInfo.CurrentCulture, Messages.Compte004, value));
                }
                if (_libelleCompte != value)
                {
                    _libelleCompte = value;
                    NotifyPropertyChanged(); 
                }
            }
        }
        #endregion
        public event PropertyChangedEventHandler PropertyChanged;
        // Cette méthode est appelée par l'accesseur Set de chaque propriété lors d'un changement de valeur
        // L'attribut CallerMemberName permet de récupérer la valeur du membre qui appelle la méthode
        // lorsque le nom de la propriété n'est pas fournie. 
        protected void NotifyPropertyChanged([CallerMemberName] String nomPropriete = "")
        {
           PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nomPropriete));
        }
        /// <summary>
        /// Chaine représentant l'objet instancié.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return string.Format(CultureInfo.CurrentCulture, @"{0};{1};{2};{3};{4};{5}", this.CodeClient, this.CodeBanque, this.CodeGuichet, this.NumeroCompte, this.CleRIB, this.LibelleCompte);
        }
        /// <summary>
        /// Deux références de comptes sont identiques si codes client,Banque,Guichet et Numéros de compte
        /// sont identiques 
        /// </summary>
        /// <returns>Vrai si les deux objets sont égaux</returns>
        public override bool Equals(Object compte)
        {
            Compte compteRef = compte as Compte;
            if (compteRef == null) return false;
            return (compteRef.CodeClient == this.CodeClient
                      && compteRef.CodeBanque == this.CodeBanque
                      && compteRef.CodeGuichet == this.CodeGuichet
                     && compteRef.NumeroCompte == this.NumeroCompte);
        }

        public override int GetHashCode()
        {
            int hashCode;
            hashCode = string.IsNullOrEmpty(_codeClient) ? 0 : _codeClient.GetHashCode();
            hashCode = string.IsNullOrEmpty(_codeBanque) ? hashCode : hashCode ^ _codeBanque.GetHashCode();
            hashCode = string.IsNullOrEmpty(_codeGuichet) ? hashCode : hashCode ^ _codeGuichet.GetHashCode();
            hashCode = string.IsNullOrEmpty(_numeroCompte) ? hashCode : hashCode ^ _numeroCompte.GetHashCode();
            return hashCode;
        }
        /// <summary>
        /// opérateur relationnel ==
        /// </summary>
        /// <param name="compteA">Instance Compte</param>
        /// <param name="compteB">Instance Compte</param>
        /// <returns>Vrai si égaux</returns>
        public static bool operator ==(CompteBase compteA, CompteBase compteB)
        {
            if ((object)compteA == null) return (object)compteB == null;
            return compteA.Equals(compteB);
        }
        /// <summary>
        ///  opérateur relationnel !=
        /// </summary>
        /// <param name="compteA">Instance Compte</param>
        /// <param name="compteB">Instance Compte</param>
        /// <returns>Vrai si différents</returns>
        public static bool operator !=(CompteBase compteA, CompteBase compteB)
        {
            if ((object)compteA == null) return (object)compteB != null;
            return !compteA.Equals(compteB);
        }
        public static bool IsLibelleCompteValide(string libelleCompte)
        {
            return !string.IsNullOrEmpty(libelleCompte);
        }
        /// <summary>
        /// Vérification nombre de digits 
        /// pour code banque, code guichet et clé RIB
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public static bool IsCodeValide(string code, short longMax)
        {
            if (code == null || code == string.Empty) return false;
            if (code.Length > longMax) return false;

            foreach (char item in code)
            {
                if (!char.IsDigit(item)) return false;
            }

            return true;
        }
        /// <summary>
        /// Vérification clé de contrôle
        /// </summary>
        /// <returns></returns>
        public static bool IsControleCleRIBValide(string codeBanque, string codeGuichet, string numeroCompteT, string cleRIB)
        {
            if (string.IsNullOrEmpty(codeBanque) || string.IsNullOrEmpty(codeGuichet) ||
                string.IsNullOrEmpty(numeroCompteT) || string.IsNullOrEmpty(cleRIB))
            {
                return false;
            }
            string intermediaire = codeBanque + codeGuichet;
            long mod97 = long.Parse(intermediaire) % 97;
            intermediaire = mod97.ToString() + numeroCompteT;
            mod97 = (long.Parse(intermediaire) * 100) % 97;
            return (long.Parse(cleRIB) == 97 - mod97);
        }
        /// <summary>
        /// Transcodage du N° de compte
        /// </summary>
        /// <param name="numeroCompte"></param>
        /// <returns></returns>
        public static string Transcoder(string numeroCompte)
        {
            string numeroCompteT = string.Empty;
            foreach (var item in numeroCompte)
            {
                if (char.IsDigit(item)) numeroCompteT += item;
                else
                {
                    int equivalentNumerique;
                    Hollerith.Transcoder(item, out equivalentNumerique);
                    numeroCompteT += equivalentNumerique.ToString();
                }

            }
            return numeroCompteT;
        }

        /// <summary>
        /// Vérification 11 digits ou caractère convertible via Table Hollerith 
        /// </summary>
        /// <param name="numeroCompte"></param>
        /// <returns></returns>
        public static bool IsNumeroCompteValide(string numeroCompte)
        {
            if (string.IsNullOrEmpty(numeroCompte)) return false;
            if (numeroCompte.Length > 11) return false;
            int equivalentNumerique;
            foreach (char item in numeroCompte)
            {
                if (!char.IsDigit(item) && !Hollerith.Transcoder(item, out equivalentNumerique)) return false;
            }

            return true;
        }
    }
}